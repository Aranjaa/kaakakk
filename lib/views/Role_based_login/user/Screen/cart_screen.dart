import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../../../services/api_service.dart';
import '../../../../core/model/cart_item_model.dart';
import 'package:shopping/views/Role_based_login/loginscreen.dart';
import 'package:logger/logger.dart';

class CartScreen extends StatefulWidget {
  @override
  _CartScreenState createState() => _CartScreenState();
}

class _CartScreenState extends State<CartScreen> {
  static final Logger _logger = Logger();
  List<CartItem> _cartItems = [];
  double _totalPrice = 0;
  bool _isLoading = false;
  String _errorMessage = '';

  @override
  void initState() {
    super.initState();
    _checkLoginAndFetchCart();
  }

  // –õ–æ–≥–∏–Ω —à–∞–ª–≥–∞–∞–¥ —Å–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
  Future<void> _checkLoginAndFetchCart() async {
    final prefs = await SharedPreferences.getInstance();
    final token = prefs.getString('token');

    if (token == null || token.isEmpty) {
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => Loginscreen()),
        );
      }
    } else {
      _fetchCartItems();
    }
  }

  // –°–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö
  Future<void> _fetchCartItems() async {
    setState(() {
      _isLoading = true;
      _errorMessage = '';
    });

    try {
      final cartData = await ApiService.fetchCartItems();
      _logger.e("API —Ö–∞—Ä–∏—É: $cartData");

      if (cartData == null) {
        setState(() {
          _errorMessage =
              '–°–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢–∞ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.';
        });
      } else if (cartData.isEmpty) {
        setState(() {
          _cartItems = [];
          _totalPrice = 0;
          _errorMessage = '–°–∞–≥—Å–∞–Ω–¥ —è–º–∞—Ä —á –±“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω –±–∞–π—Ö–≥“Ø–π.';
        });
      } else {
        setState(() {
          _cartItems = cartData.map((e) => CartItem.fromJson(e)).toList();
          _totalPrice = _cartItems.fold(
            0,
            (sum, item) => sum + item.product.price * item.quantity,
          );
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage =
            '–°–∞–≥—Å–Ω—ã –º—ç–¥—ç—ç–ª—ç–ª —Ç–∞—Ç–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –¢–∞ –¥–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É. –ê–ª–¥–∞–∞: $e';
      });
      _logger.e('üö® Error: $e'); // Error-—ã–≥ –ª–æ–≥–æ–¥ –±–∏—á–∏—Ö
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —Å–∞–≥—Å–Ω–∞–∞—Å —É—Å—Ç–≥–∞—Ö
  Future<void> _removeItem(int cartItemId) async {
    setState(() {
      _isLoading = true;
    });

    try {
      final success = await ApiService.removeCartItem(cartItemId);
      if (success) {
        setState(() {
          _cartItems.removeWhere((item) => item.id == cartItemId);
          _totalPrice = _cartItems.fold(
            0,
            (sum, item) => sum + item.product.price * item.quantity,
          );
        });
      } else {
        setState(() {
          _errorMessage = '–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —É—Å—Ç–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage =
            '–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π–≥ —É—Å—Ç–≥–∞—Ö “Ø–µ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // –ó–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö
  Future<void> _checkout() async {
    final orderData = {
      "items": _cartItems
          .map((item) => {
                "product_id": item.product.id,
                "quantity": item.quantity,
              })
          .toList(),
      "total_price": _totalPrice,
    };

    setState(() {
      _isLoading = true;
    });

    try {
      final success = await ApiService.createOrder(orderData);
      if (success) {
        Navigator.pushNamed(context, '/payment');
      } else {
        setState(() {
          _errorMessage = '–ó–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞. –î–∞—Ö–∏–Ω –æ—Ä–æ–ª–¥–æ–Ω–æ —É—É.';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage =
            '–ó–∞—Ö–∏–∞–ª–≥–∞ “Ø“Ø—Å–≥—ç—Ö–∏–π–Ω —Ç—É–ª–¥ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Ö–æ–ª–±–æ–ª—Ç–æ–æ —à–∞–ª–≥–∞–Ω–∞ —É—É.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // –ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π —Ç–æ–æ —Ö—ç–º–∂—ç—ç–≥ —à–∏–Ω—ç—á–ª—ç—Ö
  Future<void> _updateCartItemQuantity(int cartItemId, int quantity) async {
    if (quantity <= 0) {
      setState(() {
        _errorMessage = '–¢–æ–æ–Ω—ã —Ö—ç–º–∂—ç—ç 0-–∞–∞—Å –∏—Ö –±–∞–π—Ö —ë—Å—Ç–æ–π.';
      });
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final success =
          await ApiService.updateCartItemQuantity(cartItemId, quantity);

      if (success) {
        setState(() {
          _cartItems.firstWhere((item) => item.id == cartItemId).quantity =
              quantity;
          _totalPrice = _cartItems.fold(
            0,
            (sum, item) => sum + item.product.price * item.quantity,
          );
        });
      } else {
        setState(() {
          _errorMessage = '–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π —Ç–æ–æ —Ö—ç–º–∂—ç—ç–≥ —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.';
        });
      }
    } catch (e) {
      setState(() {
        _errorMessage = '–ë“Ø—Ç—ç—ç–≥–¥—ç—Ö“Ø“Ø–Ω–∏–π —Ç–æ–æ —Ö—ç–º–∂—ç—ç–≥ —à–∏–Ω—ç—á–ª—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("–ú–∏–Ω–∏–π —Å–∞–≥—Å")),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : _cartItems.isEmpty
              ? Center(
                  child: Text(
                    "–¢–∞–Ω—ã —Å–∞–≥—Å —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞",
                    style: TextStyle(fontSize: 18),
                  ),
                )
              : ListView.builder(
                  itemCount: _cartItems.length,
                  itemBuilder: (context, index) {
                    final item = _cartItems[index];
                    return Card(
                      margin: EdgeInsets.symmetric(horizontal: 10, vertical: 5),
                      child: ListTile(
                        leading: Image.network(
                          item.product.image,
                          width: 50,
                          height: 50,
                          fit: BoxFit.cover,
                        ),
                        title: Text(item.product.name),
                        subtitle: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text("“Æ–Ω—ç: ${item.product.price}‚ÇÆ"),
                            Text(
                                "–ù–∏–π—Ç: ${item.product.price * item.quantity}‚ÇÆ"),
                          ],
                        ),
                        trailing: Column(
                          children: [
                            Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                IconButton(
                                  icon: Icon(Icons.remove),
                                  onPressed: () {
                                    int newQty = item.quantity - 1;
                                    if (newQty > 0) {
                                      _updateCartItemQuantity(item.id, newQty);
                                    }
                                  },
                                ),
                                Text(item.quantity.toString()),
                                IconButton(
                                  icon: Icon(Icons.add),
                                  onPressed: () {
                                    int newQty = item.quantity + 1;
                                    _updateCartItemQuantity(item.id, newQty);
                                  },
                                ),
                              ],
                            ),
                            IconButton(
                              icon: Icon(Icons.delete, color: Colors.red),
                              onPressed: () => _removeItem(item.id),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
      bottomNavigationBar: _cartItems.isNotEmpty
          ? Padding(
              padding: const EdgeInsets.all(12.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    '–ù–∏–π—Ç: ‚ÇÆ$_totalPrice',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  ElevatedButton.icon(
                    onPressed: _checkout,
                    icon: Icon(Icons.payment),
                    label: Text('–¢”©–ª–±”©—Ä —Ö–∏–π—Ö'),
                    style: ElevatedButton.styleFrom(
                      padding:
                          EdgeInsets.symmetric(horizontal: 20, vertical: 12),
                    ),
                  ),
                ],
              ),
            )
          : null,
    );
  }

  // Show dialog to update quantity
  Future<int?> _showQuantityDialog(BuildContext context, int currentQuantity) {
    TextEditingController _quantityController =
        TextEditingController(text: currentQuantity.toString());

    return showDialog<int>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('–¢–æ–æ —Ö—ç–º–∂—ç—ç —Å–æ–Ω–≥–æ—Ö'),
          content: TextField(
            controller: _quantityController,
            keyboardType: TextInputType.number,
            decoration: InputDecoration(labelText: '–¢–æ–æ–Ω—ã —Ö—ç–º–∂—ç—ç'),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text('–ë–æ–ª–∏—Ö'),
            ),
            TextButton(
              onPressed: () {
                int? newQuantity = int.tryParse(_quantityController.text);
                if (newQuantity != null && newQuantity > 0) {
                  Navigator.of(context).pop(newQuantity);
                }
              },
              child: Text('–®–∏–Ω—ç—á–ª—ç—Ö'),
            ),
          ],
        );
      },
    );
  }
}
