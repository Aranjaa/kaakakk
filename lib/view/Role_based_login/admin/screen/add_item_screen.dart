import 'dart:async';
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import '../model/add_item_model.dart'; // Import your Product model
import '../controller/apicontroller.dart'; // Your ApiController

final Logger _logger = Logger();

class AddItems extends StatefulWidget {
  const AddItems({super.key});

  @override
  AddItemsState createState() => AddItemsState();
}

class AddItemsState extends State<AddItems> {
  final ApiController _apiController = ApiController();
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _priceController = TextEditingController();
  final TextEditingController _descriptionController = TextEditingController();
  final TextEditingController _stockController = TextEditingController();

  List<Category> _categories = [];
  List<Subcategory> _subcategories = [];

  String? _selectedCategory;
  String? _selectedSubcategory;

  List<Subcategory> _filteredSubcategories = []; // Define the filtered list

  bool _isLoading = false;
  String? _errorMessage;

  @override
  void initState() {
    super.initState();
    _fetchInitialData();
  }

  Future<void> _fetchInitialData() async {
    try {
      // Fetch categories
      final categories = await _apiController.fetchCategories();
      if (categories.isEmpty) {
        _setErrorState('Categories data is empty');
        return;
      }

      // Fetch subcategories
      final subcategories = await _apiController.fetchSubcategories();
      if (subcategories.isEmpty) {
        _setErrorState('Subcategories data is empty');
        return;
      }

      setState(() {
        _categories = categories;
        _subcategories = subcategories;
      });
    } catch (e) {
      _setErrorState('Error fetching data: $e');
    }
  }

  void _setErrorState(String message) {
    setState(() {
      _isLoading = false;
      _errorMessage = message;
    });
    _logger.e(message);
  }

  Future<void> _addItem() async {
    if (_selectedCategory == null || _selectedSubcategory == null) {
      setState(() {
        _errorMessage = 'Please select category and subcategory';
      });
      return;
    }

    if (_nameController.text.isEmpty ||
        _priceController.text.isEmpty ||
        _stockController.text.isEmpty) {
      setState(() {
        _errorMessage = 'All fields must be filled';
      });
      return;
    }

    // Additional validation for price and stock
    if (double.tryParse(_priceController.text) == null ||
        int.tryParse(_stockController.text) == null) {
      setState(() {
        _errorMessage = 'Please enter valid numbers for price and stock';
      });
      return;
    }

    final category = _categories.firstWhere(
      (cat) => cat.name == _selectedCategory!,
    );
    final subcategory = _subcategories.firstWhere(
      (sub) => sub.name == _selectedSubcategory!,
    );

    final product = Product(
      id: 0, // Assuming ID is auto-generated by backend
      name: _nameController.text,
      description: _descriptionController.text,
      price: double.parse(_priceController.text),
      stock: int.parse(_stockController.text),
      imageUrl: 'image_url', // Modify if necessary
      createdAt: DateTime.now().toIso8601String(),
      category: Category(
        id: category.id,
        name: category.name,
        description: category.description,
      ),
      subcategory: Subcategory(
        id: subcategory.id,
        categoryId: subcategory.categoryId,
        name: subcategory.name,
        description: subcategory.description,
      ),
    );

    setState(() {
      _isLoading = true;
    });

    try {
      bool success = await _apiController.addProduct(product);
      if (success) {
        setState(() {
          _isLoading = false;
          _errorMessage = null;
        });
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Item added successfully')));
        // Optionally, clear form or navigate back
      } else {
        setState(() {
          _isLoading = false;
          _errorMessage = 'Failed to add item';
        });
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
        _errorMessage = 'Error: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(centerTitle: true, title: const Text('Add Item')),
      body:
          _isLoading
              ? const Center(child: CircularProgressIndicator())
              : Padding(
                padding: const EdgeInsets.symmetric(horizontal: 15),
                child: SingleChildScrollView(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Center(
                        child: Container(
                          height: 150,
                          width: 150,
                          decoration: BoxDecoration(
                            border: Border.all(),
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                      const SizedBox(height: 10),
                      TextField(
                        controller: _nameController,
                        decoration: const InputDecoration(
                          labelText: 'Item Name',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 10),
                      TextField(
                        controller: _priceController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          labelText: 'Price',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 10),
                      TextField(
                        controller: _descriptionController,
                        decoration: const InputDecoration(
                          labelText: 'Description',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 10),
                      TextField(
                        controller: _stockController,
                        keyboardType: TextInputType.number,
                        decoration: const InputDecoration(
                          labelText: 'Stock',
                          border: OutlineInputBorder(),
                        ),
                      ),
                      const SizedBox(height: 20),
                      const Text('Select Category:'),
                      DropdownButton<String>(
                        isExpanded: true,
                        value: _selectedCategory,
                        hint: const Text('Choose Category'),
                        onChanged: (String? newValue) {
                          setState(() {
                            _selectedCategory = newValue;
                            _selectedSubcategory = null;
                            // Filter subcategories based on selected category
                            _filteredSubcategories =
                                _subcategories
                                    .where(
                                      (sub) =>
                                          sub.categoryId ==
                                          _categories
                                              .firstWhere(
                                                (cat) => cat.name == newValue,
                                              )
                                              .id,
                                    )
                                    .toList();
                          });
                        },
                        items:
                            _categories
                                .map(
                                  (cat) => DropdownMenuItem<String>(
                                    value: cat.name,
                                    child: Text(cat.name),
                                  ),
                                )
                                .toList(),
                      ),
                      const SizedBox(height: 10),
                      DropdownButton<String>(
                        isExpanded: true,
                        value: _selectedSubcategory,
                        hint: const Text('Choose Subcategory'),
                        onChanged: (String? newValue) {
                          setState(() {
                            _selectedSubcategory = newValue;
                          });
                        },
                        items:
                            _filteredSubcategories
                                .map(
                                  (sub) => DropdownMenuItem<String>(
                                    value: sub.name,
                                    child: Text(sub.name),
                                  ),
                                )
                                .toList(),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton(
                        onPressed: _addItem,
                        child: const Text('Add Item'),
                      ),
                      if (_errorMessage != null) ...[
                        const SizedBox(height: 20),
                        Text(
                          _errorMessage!,
                          style: TextStyle(color: Colors.red),
                        ),
                      ],
                    ],
                  ),
                ),
              ),
    );
  }
}
